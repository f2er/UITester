/**
 * UITester Client Manager Module
 * @author LongGang <tblonggang@gmail.com>
 * @description supply management for the client connected
 */

var http = require("http"),
    EventManager = require('event-mgr'),
    socket = require('socket.io'),
    userAgent = require('user-agent');

var ClientPool = {
    summary:{},

    // store all clients referrence while the client
    // type is not cared
    clients:[],


    getTypes:function () {
        return Object.keys(this.summary);
    },
    getUA:function (uaObj) {
        return (uaObj.name + (uaObj.msie ? uaObj.version : ''));
    },


    getFreeClients:function () {
        var host = this,
            ret = [];
        for (var i = 0; i < host.clients.length; i++) {
            if (host.clients[i].status == "free") {
                ret.push(host.clients[i]);
            }
        }

        return ret;


    },

    addClient:function (client) {
        var host = this;

        var summary = host.summary;
        //9.0 go 9


        // cache clientType
        var clientType = client.clientType = client.name;

        host.clients.push(client);

        if (!summary[clientType]) {
            summary[clientType] = 0;
        }

        summary[clientType]++;

        EventManager.emit('client:update', summary);

    },

    removeClient:function (client) {
        if (!client) {
            return;
        }
        var host = this;
        var summary = host.summary;
        var clients = host.clients,
            clientType = client.clientType;

        for (var i = 0; i < clients.length; i++) {
            if (clients[i] == client) {
                clients.splice(i, 1);
                if (!summary[clientType])summary[clientType] = 0;
                summary[clientType]--;


                if (0 >= summary[clientType]) {
                    delete summary[clientType];

                }
                EventManager.emit('client:update', summary);
            }
        }


    }
};

var ClientManager = {

    init:function (handler) {
        var host = this;
        host.createConnect(handler);

    },
    getTypes:function () {
        return  ClientPool.getTypes();
    },
    getSummary:function () {
        return ClientPool.summary;
    },
    start:function () {
        var freeClients = ClientPool.getFreeClients();
        for (var i = 0; i < freeClients.length; i++) {
            EventManager.emit('client:available', freeClients[i]);
        }

    },
    createConnect:function (handler) {
        //建立浏览器链接服务
        var app = http.createServer(handler),
            io = socket.listen(app, { 'log level':2 });

        app.listen(3031);

        io.sockets.on('connection', function (socket) {
            // wrapper object
            var clientObject = null;


            // Register client after Socket.IO connected
            socket.on('console:register', function (data) {


                clientObject = {
                    status:"free",
                    socket:socket,
                    name:data.name,
                    run:function (task, complete, timeout) {
                        if (clientObject.status == "free") {
                            clientObject.status = "buzy";
                            var isComplete = false;
                            var time = null;
                            clientObject.task = task;
                            clientObject.complete = function (data) {
                                if (isComplete)return;
                                isComplete = true;
                                if (time) {
                                    clearTimeout(time);
                                    time = null;
                                }
                                complete && complete(data);
                                clientObject.task = null;
                                //延时1秒再释放浏览器，让浏览器有时间重启
                                setTimeout(function () {
                                    clientObject.status = "free";
                                    EventManager.emit('client:available', clientObject);
                                }, 1000)

                            };
                            clientObject.timeout = function () {
                                if (!isComplete) {
                                    isComplete = true;
                                    timeout && timeout();


                                    clientObject.task = null;

                                    //延时两秒再释放浏览器，让浏览器有时间重启
                                    setTimeout(function () {
                                        clientObject.status = "free";
                                        EventManager.emit('client:available', clientObject);
                                    }, 1000)

                                }
                            }
                            clientObject.disconnect = function () {


                                if (!isComplete) {
                                    console.log(task.id + " disconnect")
                                    isComplete = true;
                                    timeout && timeout();
                                    clientObject.task = null;
                                }
                            }
                            time = setTimeout(function () {
                                clientObject && clientObject.task & clientObject.timeout && clientObject.timeout();

                            }, 1000 * 60 * 15)

                            clientObject.socket.emit('console:task_start', {id:task.id, url:task.task_inject_uri});
                        }
                    }
                };

                EventManager.on('client:update', function (summary) {
                    clientObject.socket.emit('console:update', summary);
                })
                ClientPool.addClient(clientObject);

                // Client task finished, report send back
                socket.on('console:task_finish', function (data) {


                    if (!clientObject.task || clientObject.task.id != data.id)return;

                    clientObject.complete && clientObject.complete(data.report);
                });
                // Socket.IO disconnected
                socket.on('disconnect', function () {

                    if (clientObject) {
                        clientObject.disconnect && clientObject.disconnect();

                    }
                    ClientPool.removeClient(clientObject);

                });
                socket.on('close', function () {

                    if (clientObject) {
                        clientObject.disconnect && clientObject.disconnect();

                    }
                    ClientPool.removeClient(clientObject);

                });
                EventManager.emit('client:available', clientObject);


            });


        });

    }


};

module.exports = ClientManager;