/**
 * Created with JetBrains WebStorm.
 * User: tafeng.dxx
 * Date: 12-11-24
 * Time: 下午3:45
 */

//导入模块
var EventManager = require('event-mgr');


//数据获取周期
var INTERVAL = 10000,
//缓冲大小
    BUFFER_SIZE = 1;

/*用例队列*/
var TaskCache = {
        tasks:[],
        clientTypes:[],
        total:0
    },
/*报告缓冲区*/
    reportBuffer = [];

/**
 * 用例管理函数，负责取用例，插入用例测试结果
 * @type {Object}
 */
var RemoteTaskManager = {
    init:function () {
        this._bindEvents();
        this.protectTask();
    },
    /*用例结束，插入数据库结果
     * 每满50个才进行一次性的插入，防止频繁的操作数据库
     */
    report:function (task) {



            for (var i = 0; i < TaskCache.tasks.length; i++) {
            console.log(TaskCache.tasks[i].id, task.id);
            if (TaskCache.tasks[i].id == task.id) {
                //回归任务kaishi
                console.log("[remote:report]", task.task_inject_uri)
                TaskCache.tasks[i].socket.emit("remote:task_finish", task);
                TaskCache.tasks.splice(i, 1);
                break;
            }
        }
        if (TaskCache.tasks.length == 0) {
            EventManager.emit('task:restart');
        }


    },
    getTaskById:function (task) {

    },
    //守护函数，防止在无浏览器而又有任务的情况下，进程僵化
    protectTask:function () {

        var host = this;
        setInterval(function () {
            if (!host.isAllTaskComplete()) {
                console.log("remote:task stat")
                EventManager.emit('task:data_update');
            }
        }, INTERVAL)
    },
    taskStart:function (task) {
        //回归任务暂停
        task.task.type = "remote";
        var id = new Date().getTime();
        task.id = id;
        task.task.id = id;
        TaskCache.tasks.push(task);

        this.browserCache = {};
        EventManager.emit('task:pause');
        EventManager.emit('task:data_update');

    },
    getNextTaskByClientType:function (clientType) {
        for (var i = 0; i < TaskCache.tasks.length; i++) {
            if (!TaskCache.tasks[i].isRunning) {
                var result = TaskCache.tasks[i].task.task_result;
                /*{
                 chrome:{}
                 ie6:{}
                 }
                 */

                if (!result || !result[clientType]) {
                    return TaskCache.tasks[i];
                }
            }

        }
    },
    isAllTaskComplete:function () {
        var result = true;
        for (var i = 0; i < TaskCache.tasks.length; i++) {
            if (!TaskCache.tasks[i].isRunning) {
               if(!this.isTaskComplete(TaskCache.tasks[i].task)) {
                   result =false;
               }
            }

        }
        return result;
    },
    isTaskComplete:function (task) {
        var types = TaskCache.clientTypes;
        var result = task.task_result || {};
        var isOK = true;
        for (var i = 0; i < types.length; i++) {
            if (!result[types[i]]) {
                isOK = false;
                break;
            }
        }
        return isOK;

    },

    _eventsMap:{
        /*更新浏览器*/
        'client:types':function (types, clients) {
            console.log('client:types:', types);
            TaskCache.clientTypes = types;
        },
        //运行一半，某类浏览器特吗的没了。。
        'client:typeChange':function (types) {
            TaskCache.clientTypes = types;
        },
        /*浏览器空闲事件，触发task事件，同时丢入一个task*/
        'client:available':function (clientType) {

            var task = RemoteTaskManager.getNextTaskByClientType(clientType);

            if (task) {
                task.isRunning = true;
                console.log("[remote:task start]", task.task.task_inject_uri)
                EventManager.emit('client:task_start', task.task, clientType);

            }
        },

        /*用例测完*/
        'client:task_finish':function (task) {
            //用例测完，减少计数器
            console.log("[client:task_finish]", task.task_inject_uri)

            if (task.type == "remote") {
                console.log("[client:task_finish]", task.task_result)
                if (RemoteTaskManager.isTaskComplete(task)) {
                    console.log("[client:task_finish]", task.task_inject_uri)
                    RemoteTaskManager.report(task);
                }

            }
        }
    },
    //事件绑定
    _bindEvents:function () {
        var evts = this._eventsMap;
        for (var k in evts) {
            EventManager.on(k, evts[k]);
        }
    }
};

exports.RemoteTaskManager = RemoteTaskManager;
