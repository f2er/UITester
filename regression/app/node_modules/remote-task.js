/**
 * Created with JetBrains WebStorm.
 * User: tafeng.dxx
 * Date: 12-11-24
 * Time: 下午3:45
 */

//导入模块
var EventManager = require('event-mgr');


//数据获取周期
var INTERVAL = 100,
//缓冲大小
    BUFFER_SIZE = 1;

/*用例队列*/
var TaskCache = {
        tasks:[],
        total:0
    },
/*报告缓冲区*/
    reportBuffer = [];

/**
 * 用例管理函数，负责取用例，插入用例测试结果
 * @type {Object}
 */
var RemoteTaskManager = {
    init:function () {
        this._bindEvents();
        this.protectTask();
    },
    /*用例结束，插入数据库结果
     * 每满50个才进行一次性的插入，防止频繁的操作数据库
     */
    report:function (task) {
        console.log("report", task)
        for (var i = 0; i < TaskCache.tasks.length; i++) {
            console.log(TaskCache.tasks[i].id, task.id);
            if (TaskCache.tasks[i].id == task.id) {
                //回归任务kaishi
                console.log("remote:task_finish")
                TaskCache.tasks[i].socket.emit("remote:task_finish", task);
                TaskCache.tasks.splice(i, 1);
                break;
            }
        }
        if (TaskCache.length == 0) {
            EventManager.emit('task:restart');
        }


    },
    //守护函数，防止在无浏览器而又有任务的情况下，进程僵化
    protectTask:function () {
        setInterval(function () {
            if (TaskCache.total && !RemoteTaskManager.browserCache.total) {
                EventManager.emit('task:data_update');
            }
        }, INTERVAL)
    },
    taskStart:function (task) {
        //回归任务暂停
        task.task.type = "remote";
        var id = new Date().getTime();
        task.id = id;
        task.task.id = id;
        TaskCache.tasks.push(task);

        this.browserCache = {};
        EventManager.emit('task:pause');
        EventManager.emit('task:data_update');

    },
    browserCache:{total:0},
    _eventsMap:{
        /*更新浏览器*/
        'client:types':function (types, clients) {
            console.log('client:types:', types);

            var i, len = types.length, tasks = TaskCache.tasks, total;
            RemoteTaskManager.browserCache.total = len;
            ;
            for (i = 0, total = tasks.length; i < total; i++) {
                tasks[i].task.browserCount = len;
            }
            console.log('tasks', tasks);
            //对每种浏览器复制一份用例引用
            for (i = len - 1; i > -1; --i) {

                RemoteTaskManager.browserCache[types[i]] = TaskCache.tasks.slice(0)
            }
            console.log(RemoteTaskManager.browserCache)
            //对每个用例，将计数器至为浏览器类型数量

        },

        /*浏览器空闲事件，触发task事件，同时丢入一个task*/
        'client:available':function (clientType) {
            var tasks = RemoteTaskManager.browserCache[clientType];
            console.log("client:available", tasks)
            if (tasks&&tasks.length>0) {
                var task = tasks.shift();
                console.log("client:available", task.task)
                EventManager.emit('client:task_start', task.task, clientType);
                //task && clientObject.runTask(task)
            }
        },
        //运行一半，某类浏览器特吗的没了。。
        'client:resettype':function (type) {
            console.info('[ClientMgr Event] client:resettype', type);
            var typeTask = RemoteTaskManager.browserCache[type];

            if (!typeTask) {
                return;
            }

            for (var i = 0, len = typeTask.length; i < len; ++i) {
                typeTask[i].reportData = 'disconnect';
                EventManager.emit('client:task_finish', typeTask[i].task);
            }
            //清空该类型
            delete RemoteTaskManager.browserCache[type];
            --RemoteTaskManager.browserCache.total;
            console.info('RemoteTaskManager', RemoteTaskManager)
        },
        /*用例测完*/
        'client:task_finish':function (task) {
            //用例测完，减少计数器
            console.log("client:task_finish", task)
            if (task.type == "remote") {
                console.log("client:task_finish", task)
                if (--task.browserCount == 0) {
                    //计数器为0，减少用例池的总数，同时报告该用例结果
                    RemoteTaskManager.report(task);

                }
            }
        }
    },
    //事件绑定
    _bindEvents:function () {
        var evts = this._eventsMap;
        for (var k in evts) {
            EventManager.on(k, evts[k]);
        }
    }
};

exports.RemoteTaskManager = RemoteTaskManager;
