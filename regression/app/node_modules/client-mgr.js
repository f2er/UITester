/**
 * UITester Client Manager Module
 * @author LongGang <tblonggang@gmail.com>
 * @description supply management for the client connected
 */

var _ = require('underscore'),
    EventManager = require('event-mgr');

var ClientPool = {
    init:function () {
        this.summary = { total:0 };

        // store all clients referrence while the client
        // type is not cared
        this.clients = [];

        // store clients referrence by client type
        this.clientsMap = {};

        // for report
        // this.unavailableClients = [];
    },

    getTypes:function () {
        return Object.keys(this.clientsMap);
    },

    getSummary:function () {
        return this.summary;
    },

    _updateInfo:function (clientObject, action) {
        var host = this,
            clientType = clientObject.clientType,
            summary = host.summary;

        if ('add' === action) {
            if (!summary[clientType]) {
                summary[clientType] = 0;
            }

            summary[clientType]++;
            summary.total++;
        }

        if ('remove' === action) {
            summary[clientType]--;
            summary.total--;

            if (0 === summary[clientType]) {
                delete summary[clientType];
                EventManager.emit('client:resettype', clientType);
            }
        }
        EventManager.emit('client:typeChange', ClientPool.getTypes());
        console.log('[ClientPool]', host.summary);
    },

    _getUA:function (uaObj) {
        return (uaObj.name + (uaObj.msie ? uaObj.version : ''));
    },

    _setItemFree:function (clientObject) {
        clientObject.status = 'free';
    },

    _setItemBusy:function (clientObject) {
        clientObject.status = 'busy';
    },

    _checkItemFree:function (clientObject) {
        return ('free' === clientObject.status);
    },

    getFreeClient:function () {
        var host = this,
            ret = [];

        _.each(host.clients, function (clientObject) {
            if (host._checkItemFree(clientObject)) {
                ret.push(clientObject);
            }
        });

        return ret;
    },

    setItem:function (clientObject) {
        var host = this;

        // new connected client, it must be free
        host._setItemFree(clientObject);

        var clientType = host._getUA(clientObject.userAgent.browser);

        // cache clientType
        clientObject.clientType = clientType;

        if (!host.clientsMap[clientType]) {
            host.clientsMap[clientType] = [];
        }

        host.clientsMap[clientType].push(clientObject);

        host.clients.push(clientObject);

        host._updateInfo(clientObject, 'add');
    },

    removeItem:function (clientObject) {
        var host = this;

        if (!clientObject) {
            throw('[Error] Not an available clientObject');
        }

        var clients = host.clients,
            clientsMap = host.clientsMap,
            clientType = clientObject.clientType,

            indexInClients = _.indexOf(clients, clientObject),
            indexInClientsMap = _.indexOf(clientsMap[clientType], clientObject);

        if (indexInClients < 0 || indexInClientsMap < 0) {
            console.info(
                '[ClientMgr Exception] try to remove a clientObject not in ClientPool, operation is ignored!',
                'indexInClients:', indexInClients,
                ', indexInClientsMap: ', indexInClientsMap
            );

            return;
        }

        clients.splice(indexInClients, 1);
        clientsMap[clientType].splice(indexInClientsMap, 1);

        if (0 === clientsMap[clientType].length) {
            delete clientsMap[clientType];
        }

        host._updateInfo(clientObject, 'remove');
    }
};

var ClientManager = {
    listenEventMap:{
        'client:register':function (clientObject) {


            ClientPool.setItem(clientObject);

            // Client task finished, report send back
            clientObject.socket.on('console:task_finish', function (data) {


                var result =clientObject.taskObject.task_result = clientObject.taskObject.task_result || {};

                result[clientObject.clientType] = data;


                ClientPool._setItemFree(clientObject);
                // Tell TaskManager to save Test Data
                EventManager.emit('client:task_finish', clientObject.taskObject);
                EventManager.emit('client:available', clientObject.clientType);

            });
            clientObject.socket.on('disconnect', function () {
                ClientPool.removeItem(clientObject);
                EventManager.emit('client:unavailable', clientObject);
            });

            EventManager.emit('client:available', clientObject.clientType);
            EventManager.emit('client:change');
        },

        'client:change': function (){
            var host = this;

            _.each(ClientPool.clients, function (clientObject){
                EventManager.emit('client:send_summary', clientObject);
            });
        },

        'client:disconnect': function (clientObject) {
            console.log('[ClientMgr Event] client disconnect', clientObject.clientType);

            ClientPool.removeItem(clientObject);
            EventManager.emit('client:unavailable', clientObject);
            EventManager.emit('client:change');
        },

        'task:data_update':function () {
            // if TaskManager subscribe this msg, it can
            // get all client infomations
            EventManager.emit('client:types', ClientPool.getTypes());

            _.each(ClientPool.getFreeClient(), function (clientObject) {
                EventManager.emit('client:available', clientObject.clientType);
            });
        },

        'client:task_start':function (taskObject, clientType) {

            var clients = ClientPool.clientsMap[clientType];

            var idx = 0, len = clients.length;

            for (; idx < len; idx++) {
                if (clients[idx].status === 'free') {
                    break;
                }
            }

            if (idx >= len) {
                throw ('task required a invalid client');
            }

            var clientObject = clients[idx];

            ClientPool._setItemBusy(clientObject);

            clientObject.taskObject = taskObject;

            if(clientObject.timer){
                clearTimeout(clientObject.timer);
                timer = null;
            }

            clientObject.timer = setTimeout(function(){
                if(ClientPool._checkItemFree(clientObject)){
                    return;
                }

                ClientPool._setItemFree(clientObject);
                clientObject.socket.emit('console:reload');
                EventManager.emit('client:task_finish', clientObject.taskObject);
            }, 1000 * 60 * 3);
             console.log("client start")
            clientObject.socket.emit('console:task_start', taskObject);
        },

        'client:send_summary': function (clientObject){
            clientObject.socket.emit('console:summary', ClientPool.getSummary());
        }
    },

    init:function (config) {
        var host = this;

        ClientPool.init();

        host.handleEventListener();
    },

    handleEventListener:function () {
        var host = this;

        _.each(host.listenEventMap, function (fn, eventName) {
            EventManager.on(eventName, fn);
        });

    }
};

module.exports = ClientManager;