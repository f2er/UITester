/**
 * Created with JetBrains WebStorm.
 * User: tafeng.dxx
 * Date: 12-11-24
 * Time: 下午3:45
 */

//导入模块
var EventManager = require('event-mgr');
var db = require('data-mod');

//数据获取周期
var INTERVAL = 30000;

/*用例队列*/
var TaskCache = {
    tasks:[]
};


/**
 * 用例管理函数，负责取用例，插入用例测试结果
 * @type {Object}
 */
var TaskManager = {
    init:function (ClientManager) {
        this.ClientManager = ClientManager;
        db.init('10.232.35.23', 'root', '1234');
        this.observeClientAvailable();
        this.fetchTask();
        this.protectTask();

    },

    getNextTaskByClientType:function (clientType) {
        for (var i = 0; i < TaskCache.tasks.length; i++) {

            var result = TaskCache.tasks[i]._task_result;

            if (!result || !result[clientType]) {
                return TaskCache.tasks[i];
            }
        }
    },

    isTaskComplete:function (task) {
        var types = this.ClientManager.getTypes();
        var result = task._task_result || {};
        var isOK = true;
        for (var i = 0; i < types.length; i++) {
            if (!result[types[i]]) {
                isOK = false;
                break;
            }
        }
        return isOK;

    },
    /*用例结束，插入数据库结果
     * 每满50个才进行一次性的插入，防止频繁的操作数据库
     *
     *	修改: 每满50操作一次, 如果是多条语句, 反而提高了数据库的Qps, 不如分散操作
     *			而且, 如果服务器DOWN机, 会造成数据丢失
     *			所以, 这里修改了   by daolin
     *
     *	每条报告, 立即插入一次
     */
    report:function (task) {
        var host = this;
        host.removeTask(task);
        host.mixReport(task)


        db.updateOne(task, function () {

            if (TaskCache.tasks.length == 0) {
                TaskManager.fetchTask();
            }
        });

    },
    addTask:function (tasks) {
        TaskCache.tasks = TaskCache.tasks.concat(tasks);
    },
    removeTask:function (task) {
        for (var i = 0; i < TaskCache.tasks.length; i++) {

            if (TaskCache.tasks[i].id == task.id) {
                //回归任务kaishi
                TaskCache.tasks.splice(i, 1);
                break;
            }
        }
    },
    clearTask:function(){
        var host =this;
        if (TaskCache.tasks.length != 0) {

            for (var i = 0; i < TaskCache.tasks.length; i++) {
                if (host.isTaskComplete(TaskCache.tasks[i])) {
                    host.report(TaskCache.tasks[i])
                }
            }
        }
    },
    mixReport:function (task) {
        if (!task._task_result)return;
        if (!task.task_result)task.task_result = {}
        if (typeof task.task_result == "string") {
            task.task_result = JSON.parse(task.task_result);
        }
        for (var p in task._task_result) {
            task.task_result[p] = task._task_result[p];
        }

    },
    //守护函数，防止在无浏览器而又有任务的情况下，进程僵化
    protectTask:function () {
        var host = this;
        setInterval(function () {


            if (TaskCache.tasks.length != 0) {
                host.ClientManager.start();
            }
            else {
                TaskManager.fetchTask();
            }
        }, INTERVAL)
    },
    fetchTask:function () {
        var host = this;

        db.findLatestSpecs(function (data) {
            if (data&&data.length) {
                host.addTask(data)

                host.ClientManager.start();

            }

        });
    },

    //事件绑定
    observeClientAvailable:function () {

        EventManager.on("client:available", function (client) {

            var type = client.clientType;
            console.log("client:available", type)
            console.log("all task length", TaskCache.tasks.length)

            var task = TaskManager.getNextTaskByClientType(type);

            if (task) {
                console.log("get task id", task.id)
                if (!task._task_result) {
                    task._task_result = {}
                }
                task._task_result[type] = {};
                client.run(task,
                    function (data) {

                        console.log("task complete id" + task.id)
                        task._task_result[type] = data;

                        if (TaskManager.isTaskComplete(task)) {
                            TaskManager.report(task);
                        }

                    },
                    function () {
                        console.log(task.id+" 超时")
                        task._task_result[type] = null;
                    })

            }
            else if(TaskCache.tasks.length){
                TaskManager.clearTask();
            }
        });

    }
};

module.exports = TaskManager;
module.exports = TaskManager;
